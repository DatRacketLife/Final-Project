 (require rsound)
(require rsound/piano-tones)
(define beats-per-minute 160)
(define (s x)(* 44100 x))
(define (b x)(* x (s (/ 60 beats-per-minute))))
(define (m x)(* x (b 4)))
(define-struct chord (first third fifth))

;; a note is (make-note note-num frames frames)
(define-struct note (pitch time duration))
(define t 62)
(define D 
  (list
   (make-note (+ t 0) (m 1) 88200)
   (make-note (+ t 4) (m 1) 88200)
   (make-note (+ t 7) (m 1) 88200)
   
   (make-note (+ t 2) (m 2) 88200)
   (make-note (+ t 6) (m 2) 88200)
   (make-note (+ t 9) (m 2) 88200)
   
   (make-note (+ t 5) (m 3) 88200)
   (make-note (+ t 9) (m 3) 88200)
   (make-note (+ t 12) (m 3) 88200)
   
   (make-note (+ t 7) (m 4) 88200)
   (make-note (+ t 11) (m 4) 88200)
   (make-note (+ t 14) (m 4) 88200)))
;; string -> list-of-three-notes
(define-struct prog (first third fifth))
  
(define one (make-prog (make-note (+ t 0) 88200 88200)
  (make-note (+ t 4) 88200 88200)
  (make-note (+ t 7) 88200 88200)))
(define ps (make-pstream))
(define (both a b) b)
;; play the notes in a list
;; list-of-notes -> pstream
(define (play-notes lon)
  (cond [(empty? lon) ps]
        [else
         (both (play-note (first lon)) 
               (play-notes (rest lon)))]))
;; play a single note
;; note -> pstream
(define (play-note n)
  (pstream-queue
   ps
   (clip (piano-tone (note-pitch n))
         0 (note-duration n))
   (note-time n)))
(play-notes D)
